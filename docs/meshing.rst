.. _meshing:

Meshing Overview
==================================

Blades can be meshed either with the in-house mesher or with Cubit. The table below summarizes 
the differences between the two. 

.. csv-table:: Comparison of meshing capabilities between the in-house mesher and Cubit.
   :file: compare_in_house_vs_cubit.csv
   :widths: 1, 1, 1
   :header-rows: 1



.. _sample_inHouse_shell:
.. figure:: /_static/images/shellMesh_inHouse.jpg

   Sample shell mesh generated by in-house mesher


.. _sample_inHouse_solid:
.. figure:: /_static/images/solidMesh_inHouse.jpg

   Sample solid mesh generated by in-house mesher



.. _cubit_sample_cross_section:
.. figure:: /_static/images/cubit/sampleCross-section.png

   Sample cross section generated by driving Cubit with pyNuMAD 

.. _cubit_sample_cross_section:
.. figure:: /_static/images/cubit/sample_solid_mesh_cubit.png

   Sample solid mesh generated by driving Cubit with pyNuMAD 

In-house mesher
---------------
This is how to make in in-house mesh 


Meshing with Cubit
------------------




After setting the path to Cubit, import pynumad

.. code-block:: python

   import pynumad


Then add Cubit to the path

.. code-block:: python

   import sys
   sys.path.append(pynumad.SOFTWARE_PATHS['cubit'])
   sys.path.append(pynumad.SOFTWARE_PATHS['cubitEnhancements'])  
   import cubit


There are two main ways to use the Cubit functionality. The first is the create any all blade cross sections with 
:py:func:`~pynumad.analysis.cubit.cubit_make_cross_sections`. The second is to connect these cross sections with 
solid volumes with :py:func:`~pynumad.analysis.cubit.cubit_make_cross`. Both ways require the user
to define two dictionaries. 

One is named ``cs_params``. It controls the details of how the cross-sections are created. The table below shows
all of the required keys as well as their descriptions. 

.. csv-table:: Key values for the ``cs_params`` dictionary needed for :py:func:`~pynumad.analysis.cubit.cubit_make_cross_sections` 
   and :py:func:`~pynumad.analysis.cubit.cubit_make_cross`.
   :file: cs_params_dict.csv
   :widths: 1, 1
   :header-rows: 1

The figures below also helps to define some of the ``cs_params``.

.. _cubit_sample_TE:
.. figure:: /_static/images/cubit/sampleTE.png

   
   Trailing edge detail.

.. _cubit_web_adhesive:
.. figure:: /_static/images/cubit/sampleWeb_adhesive.png
   
   Web adhesive detail.

.. _cubit_sample_LE:
.. figure:: /_static/images/cubit/sampleLE.png
   :width: 4.0in
   
   Leading edge detail.




The other dictionary is named ``settings`` and it controls which codes you want to make input files for.  

.. csv-table:: Key values for the ``settings`` dictionary needed for :py:func:`~pynumad.analysis.cubit.cubit_make_cross_sections` 
   and :py:func:`~pynumad.analysis.cubit.cubit_make_cross`.
   :file: settings_dict.csv
   :widths: 1, 1
   :header-rows: 1

Note that "cub" files are only needed if you want to visualize your model in Cubit. "g" refers to Genesis binary files 
that are needed by the Sierra codes. 


Troubleshooting issues with Cubit meshing is facilitated by "make_blade.log". There you will generally 
be able to see what parts of the blade have been created and where the code stopped.

.. Note:: 
    The following files can be ignored for now: "euler", "directions"





